# api/models.py
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

class Vendor(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    payment_details = models.TextField(blank=True, null=True)  # Store payment details

    def __str__(self):
        return self.name

class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock = models.PositiveIntegerField()
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

# api/models.py (add this to the same file)
class Customer(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

# api/models.py (add this to the same file)
class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    order_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Shipped', 'Shipped'), ('Delivered', 'Delivered')])
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_method = models.CharField(max_length=20, default='Payment on Delivery')

    def __str__(self):
        return f"Order {self.id} - {self.status}"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"

# api/models.py (add this to the same file)
class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    rating = models.PositiveIntegerField()
    comment = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.customer.name} for {self.product.name}"
from rest_framework import viewsets
from rest_framework.response import Response
from .models import Order, OrderItem
from .serializers import OrderSerializer
from django.core.mail import send_mail
from django.shortcuts import render
import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import requests
import json
# Function to notify the vendor
def notify_vendor(order_item):
    vendor = order_item.product.vendor
    subject = f"New Order for {order_item.product.name}"
    message = f"You have a new order for {order_item.quantity} of {order_item.product.name}. Please prepare for delivery."
    send_mail(subject, message, 'from@example.com', [vendor.email])

class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer

    def create(self, request, *args, **kwargs):
        response = super().create(request, *args, **kwargs)
        order = response.data
        order_items = OrderItem.objects.filter(order_id=order['id'])
        for item in order_items:
            notify_vendor(item)
        return response

# Configure logging
logger = logging.getLogger(__name__)

def chat_view(request):
    return render(request, 'api/chat.html')

@csrf_exempt
def rasa_webhook(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            user_message = data.get("message", "")

            if not user_message:
                logger.error("No message provided in request")
                return JsonResponse({"error": "No message provided"}, status=400)

            rasa_url = "http://localhost:5005/webhooks/rest/webhook"
            response = requests.post(rasa_url, json={"sender": "user", "message": user_message})
            response.raise_for_status()
            rasa_response = response.json()

            logger.info("Rasa response: %s", rasa_response)
            return JsonResponse(rasa_response, safe=False)
        except json.JSONDecodeError:
            logger.error("Invalid JSON in request")
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except requests.exceptions.RequestException as e:
            logger.error("Error communicating with Rasa: %s", e)
            return JsonResponse({"error": str(e)}, status=500)

    logger.error("Invalid request method")
    return JsonResponse({"error": "Invalid request method"}, status=400)
@csrf_exempt
def conversation_history(request):
    if request.method == "GET":
        try:
            sender_id = request.GET.get("sender_id", "user")
            rasa_url = f"http://localhost:5005/conversations/{sender_id}/tracker"
            response = requests.get(rasa_url)
            response.raise_for_status()
            history = response.json()

            return JsonResponse(history, safe=False)
        except requests.exceptions.RequestException as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request method"}, status=400)
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import ChatMessageSerializer
import requests

class ChatbotInteractionView(APIView):
    def post(self, request, *args, **kwargs):
        serializer = ChatMessageSerializer(data=request.data)
        if serializer.is_valid():
            message = serializer.validated_data['message']
            # Send message to Rasa and get the response
            rasa_response = requests.post('http://localhost:5005/webhooks/rest/webhook', json={'message': message})
            return Response(rasa_response.json())
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
# api/views.py
from rest_framework import viewsets
from .models import Product, Customer, Order, OrderItem, Category, Vendor, Review
from .serializers import ProductSerializer, CustomerSerializer, OrderSerializer, OrderItemSerializer, CategorySerializer, VendorSerializer, ReviewSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class CustomerViewSet(viewsets.ModelViewSet):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer

class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer

class OrderItemViewSet(viewsets.ModelViewSet):
    queryset = OrderItem.objects.all()
    serializer_class = OrderItemSerializer

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer

class VendorViewSet(viewsets.ModelViewSet):
    queryset = Vendor.objects.all()
    serializer_class = VendorSerializer

class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer
# api/urls.py
from .views import rasa_webhook,conversation_history,chat_view,ChatbotInteractionView
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ProductViewSet, CustomerViewSet, OrderViewSet, OrderItemViewSet, CategoryViewSet, VendorViewSet, ReviewViewSet

router = DefaultRouter()
router.register(r'products', ProductViewSet)
router.register(r'customers', CustomerViewSet)
router.register(r'orders', OrderViewSet)
router.register(r'orderitems', OrderItemViewSet)
router.register(r'categories', CategoryViewSet)
router.register(r'vendors', VendorViewSet)
router.register(r'reviews', ReviewViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('rasa/', rasa_webhook, name='rasa_webhook'),
    path('history/', conversation_history, name='conversation_history'),
    path('chat1/', chat_view, name='chat_view'),
    path('chat/', ChatbotInteractionView.as_view(), name='chatbot_interaction'),
]
from rest_framework import serializers

class ChatMessageSerializer(serializers.Serializer):
    message = serializers.CharField()
# api/serializers.py
from rest_framework import serializers
from .models import Product, Customer, Order, OrderItem, Category, Vendor, Review

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'

class VendorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Vendor
        fields = '__all__'

class ProductSerializer(serializers.ModelSerializer):
    category = CategorySerializer()
    vendor = VendorSerializer()

    class Meta:
        model = Product
        fields = '__all__'

class CustomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Customer
        fields = '__all__'

class OrderItemSerializer(serializers.ModelSerializer):
    product = ProductSerializer()

    class Meta:
        model = OrderItem
        fields = '__all__'

class OrderSerializer(serializers.ModelSerializer):
    customer = CustomerSerializer()
    orderitem_set = OrderItemSerializer(many=True)

    class Meta:
        model = Order
        fields = '__all__'
class ReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = Review
        fields = '__all__'
